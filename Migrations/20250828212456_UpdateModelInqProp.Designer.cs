// <auto-generated />
using System;
using Alquileres.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Alquileres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250828212456_UpdateModelInqProp")]
    partial class UpdateModelInqProp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Alquileres.Models.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_empresa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpresa"));

                    b.Property<bool>("ActivarCobroRapido")
                        .HasColumnType("bit")
                        .HasColumnName("factivar_cobro_rapido");

                    b.Property<byte[]>("CodigoQrRedes")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("fcodigoqr_redes");

                    b.Property<byte[]>("CodigoQrWeb")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("fcodigoqr_web");

                    b.Property<string>("Contrasena")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fcontraseña");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fdireccion");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("femail");

                    b.Property<byte[]>("Fondo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ffondo");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("flogo");

                    b.Property<string>("Mensaje")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fmensaje");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fnombre");

                    b.Property<string>("Rnc")
                        .HasColumnType("varchar(18)")
                        .HasColumnName("frnc");

                    b.Property<string>("Slogan")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("festlogan");

                    b.Property<string>("Telefonos")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("ftelefonos");

                    b.HasKey("IdEmpresa")
                        .HasName("PK_tb_empresa");

                    b.ToTable("tb_empresa", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbAuditorium", b =>
                {
                    b.Property<int>("FidAuditoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_auditoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidAuditoria"));

                    b.Property<string>("Faccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faccion");

                    b.Property<DateTime>("Ffecha")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha");

                    b.Property<string>("Fhora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fhora");

                    b.Property<int>("FkidRegistro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_registro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<string>("Ftabla")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ftabla");

                    b.HasKey("FidAuditoria");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_auditoria", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobro", b =>
                {
                    b.Property<int>("FidCobro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cobro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCobro"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<decimal>("Fcargos")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fcargos");

                    b.Property<string>("Fconcepto")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("fconcepto");

                    b.Property<decimal>("Fdescuento")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fdescuento");

                    b.Property<DateOnly>("Ffecha")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha");

                    b.Property<TimeOnly>("Fhora")
                        .HasColumnType("time")
                        .HasColumnName("fhora");

                    b.Property<int>("FkidCxc")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cxc");

                    b.Property<int>("FkidOrigen")
                        .HasColumnType("int")
                        .HasColumnName("fkid_origen");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmonto");

                    b.Property<string>("Fncf")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("fncf");

                    b.Property<DateOnly?>("FncfVence")
                        .HasColumnType("date");

                    b.HasKey("FidCobro");

                    b.HasIndex("FkidCxc");

                    b.ToTable("tb_cobro", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobroNulo", b =>
                {
                    b.Property<int>("FidCobroNulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cobro_nulo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCobroNulo"));

                    b.Property<DateOnly?>("FfechaAnulacion")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_anulacion");

                    b.Property<TimeOnly>("Fhora")
                        .HasColumnType("time")
                        .HasColumnName("fhora");

                    b.Property<int>("FkidCobro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cobro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<string>("FmotivoAnulacion")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fmotivo_anulacion");

                    b.HasKey("FidCobroNulo");

                    b.HasIndex("FkidCobro");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_cobro_nulo", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDesglose", b =>
                {
                    b.Property<int>("FidDesglose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_desglose");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidDesglose"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<decimal>("Fcheque")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fcheque");

                    b.Property<decimal>("FdebitoAutomatico")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fdebito_automatico");

                    b.Property<decimal>("Fdeposito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fdeposito");

                    b.Property<decimal>("Fefectivo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fefectivo");

                    b.Property<int>("FkidCobro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cobro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("FmontoRecibido")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmonto_recibido");

                    b.Property<int>("FnoNotaCredito")
                        .HasColumnType("int")
                        .HasColumnName("fno_nota_credito");

                    b.Property<decimal>("FnotaCredito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fnota_credito");

                    b.Property<decimal>("Ftarjeta")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("ftarjeta");

                    b.Property<decimal>("Ftransferencia")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("ftransferencia");

                    b.HasKey("FidDesglose");

                    b.HasIndex("FkidCobro");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_cobros_desglose", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDetalle", b =>
                {
                    b.Property<int>("FidCobroDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cobro_detalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCobroDetalle"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<int>("FkidCobro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cobro");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmonto");

                    b.Property<decimal>("Fmora")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmora");

                    b.Property<int>("FnumeroCuota")
                        .HasColumnType("int")
                        .HasColumnName("fnumero_cuota");

                    b.HasKey("FidCobroDetalle");

                    b.HasIndex("FkidCobro");

                    b.ToTable("tb_cobros_detalle", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbComprobanteFiscal", b =>
                {
                    b.Property<int>("FidComprobante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_comprobante");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidComprobante"));

                    b.Property<string>("Fcomprobante")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("fcomprobante")
                        .HasComputedColumnSql("([fprefijo]+CONVERT([varchar],replicate('0',(8)-len([fcontador]+(1)))+CONVERT([varchar],[fcontador]+(1)))) PERSISTED");

                    b.Property<int?>("Fcontador")
                        .HasColumnType("int")
                        .HasColumnName("fcontador");

                    b.Property<string>("FestadoSync")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("S")
                        .HasColumnName("festado_sync")
                        .IsFixedLength();

                    b.Property<int?>("Ffinaliza")
                        .HasColumnType("int")
                        .HasColumnName("ffinaliza");

                    b.Property<int?>("FidTipoComprobante")
                        .HasColumnType("int")
                        .HasColumnName("fid_tipo_comprobante");

                    b.Property<int?>("Finicia")
                        .HasColumnType("int")
                        .HasColumnName("finicia");

                    b.Property<int?>("FkidEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("fkid_empresa");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<string>("Fprefijo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("fprefijo")
                        .IsFixedLength();

                    b.Property<string>("FtipoComprobante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ftipo_comprobante");

                    b.Property<DateTime?>("Fvence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fvence")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("FidComprobante")
                        .HasName("PK_tb_comprobante_fiscal");

                    b.HasIndex("FkidEmpresa");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_comprobante_fiscal", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCxc", b =>
                {
                    b.Property<int>("FidCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cuenta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCuenta"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<int>("FdiasGracia")
                        .HasColumnType("int")
                        .HasColumnName("fdias_gracia");

                    b.Property<DateTime>("FfechaInicio")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_inicio");

                    b.Property<DateTime>("FfechaProxCuota")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_prox_cuota");

                    b.Property<int?>("FkidInmueble")
                        .HasColumnType("int")
                        .HasColumnName("fkid_inmueble");

                    b.Property<int?>("FkidInquilino")
                        .HasColumnType("int")
                        .HasColumnName("fkid_inquilino");

                    b.Property<int>("FkidPeriodoPago")
                        .HasColumnType("int")
                        .HasColumnName("fid_periodo_pago");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmonto");

                    b.Property<string>("Fnota")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fnota");

                    b.Property<string>("Fstatus")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("fstatus");

                    b.Property<decimal>("FtasaMora")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("ftasa_mora");

                    b.HasKey("FidCuenta");

                    b.HasIndex("FkidInmueble");

                    b.HasIndex("FkidInquilino");

                    b.HasIndex("FkidPeriodoPago");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_cxc", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCxcCuotum", b =>
                {
                    b.Property<int>("FidCuota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cuota");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCuota"));

                    b.Property<int>("FNumeroCuota")
                        .HasColumnType("int")
                        .HasColumnName("fnumero_cuota");

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<int>("FdiasAtraso")
                        .HasColumnType("int")
                        .HasColumnName("fdias_atraso");

                    b.Property<DateTime>("FfechaUltCalculo")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_ult_calculo");

                    b.Property<int>("FkidCxc")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cxc");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmonto");

                    b.Property<decimal>("Fmora")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmora");

                    b.Property<decimal>("Fsaldo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fsaldo");

                    b.Property<string>("Fstatus")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("fstatus");

                    b.Property<DateTime>("Fvence")
                        .HasColumnType("Date")
                        .HasColumnName("fvence");

                    b.HasKey("FidCuota");

                    b.HasIndex("FkidCxc");

                    b.ToTable("tb_cxc_cuota", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCxcNulo", b =>
                {
                    b.Property<int>("FidCuentaNulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cxc_nulo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCuentaNulo"));

                    b.Property<DateOnly?>("FfechaAnulacion")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_anulacion");

                    b.Property<TimeOnly>("Fhora")
                        .HasColumnType("time")
                        .HasColumnName("fhora");

                    b.Property<int>("FkidCuenta")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cuenta");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<string>("FmotivoAnulacion")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fmotivo_anulacion");

                    b.HasKey("FidCuentaNulo");

                    b.HasIndex("FkidCuenta");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_cxc_nulo", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbGasto", b =>
                {
                    b.Property<int>("FidGasto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_gasto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidGasto"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fdescripcion")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fdescripcion");

                    b.Property<DateOnly>("Ffecha")
                        .HasColumnType("date")
                        .HasColumnName("ffecha");

                    b.Property<int>("FkidGastoTipo")
                        .HasColumnType("int")
                        .HasColumnName("fkid_gasto_tipo");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmonto");

                    b.HasKey("FidGasto")
                        .HasName("PK_tb_gasto");

                    b.HasIndex("FkidGastoTipo");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_gasto", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbGastoTipo", b =>
                {
                    b.Property<int>("FidGastoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_gasto_tipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidGastoTipo"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fdescripcion")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fdescripcion");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fmonto");

                    b.HasKey("FidGastoTipo")
                        .HasName("PK_tb_gasto_tipo");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_gasto_tipo", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbInmueble", b =>
                {
                    b.Property<int>("FidInmueble")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_inmueble");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidInmueble"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fdescripcion")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fdescripcion");

                    b.Property<string>("Fdireccion")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("fdireccion");

                    b.Property<DateTime>("FfechaRegistro")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_registro");

                    b.Property<int>("FkidMoneda")
                        .HasColumnType("int")
                        .HasColumnName("fkid_moneda");

                    b.Property<int>("FkidPropietario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_propietario");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("Fprecio")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fprecio");

                    b.Property<string>("Fubicacion")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fubicacion");

                    b.HasKey("FidInmueble");

                    b.HasIndex("FkidMoneda");

                    b.HasIndex("FkidUsuario");

                    b.HasIndex(new[] { "FkidPropietario" }, "IX_tb_inmueble_fkid_propietario");

                    b.ToTable("tb_inmueble", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbInquilino", b =>
                {
                    b.Property<int>("FidInquilino")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_inquilino");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidInquilino"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fapellidos")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fapellidos");

                    b.Property<string>("Fcedula")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fcedula");

                    b.Property<string>("Fcelular")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fcelular");

                    b.Property<string>("Fdireccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("fdireccion");

                    b.Property<DateTime>("FfechaRegistro")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_registro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre");

                    b.Property<string>("Ftelefono")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ftelefono");

                    b.HasKey("FidInquilino");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_inquilino", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbMoneda", b =>
                {
                    b.Property<int>("FidMoneda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_moneda");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidMoneda"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fmoneda")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("fmoneda");

                    b.Property<string>("Fsimbolo")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("fsimbolo");

                    b.HasKey("FidMoneda");

                    b.ToTable("tb_moneda", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbPeriodoPago", b =>
                {
                    b.Property<int>("FidPeriodoPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_periodo_pago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidPeriodoPago"));

                    b.Property<int>("Fdias")
                        .HasColumnType("int")
                        .HasColumnName("fdias");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fnombre");

                    b.HasKey("FidPeriodoPago");

                    b.ToTable("tb_periodos_pago", (string)null);

                    b.HasData(
                        new
                        {
                            FidPeriodoPago = 1,
                            Fdias = 30,
                            Fnombre = "Mensual"
                        });
                });

            modelBuilder.Entity("Alquileres.Models.TbPermisoCobro", b =>
                {
                    b.Property<int>("FidPermisoCobro")
                        .HasColumnType("int")
                        .HasColumnName("fid_permiso_cobro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.HasKey("FidPermisoCobro")
                        .HasName("PK_tb_permiso_cobro");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_permiso_cobros", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbPropietario", b =>
                {
                    b.Property<int>("FidPropietario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_propietario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidPropietario"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fapellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fapellidos");

                    b.Property<string>("Fcedula")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fcedula");

                    b.Property<string>("Fcelular")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fcelular");

                    b.Property<string>("Fdireccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("fdireccion");

                    b.Property<DateTime>("FfechaRegistro")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha_registro");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre");

                    b.Property<string>("Ftelefono")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ftelefono");

                    b.HasKey("FidPropietario");

                    b.ToTable("tb_propietario", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbUsuario", b =>
                {
                    b.Property<int>("FidUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidUsuario"));

                    b.Property<bool>("FTutorialVisto")
                        .HasMaxLength(450)
                        .HasColumnType("bit")
                        .HasColumnName("tutorial_visto");

                    b.Property<bool>("Factivado")
                        .HasColumnType("bit")
                        .HasColumnName("factivado");

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Femail")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("femail");

                    b.Property<int>("FkidSucursal")
                        .HasColumnType("int")
                        .HasColumnName("fkid_sucursal");

                    b.Property<int>("Fnivel")
                        .HasColumnType("int")
                        .HasColumnName("fnivel");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre");

                    b.Property<string>("Fpassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("fpassword");

                    b.Property<string>("Fusuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fusuario");

                    b.Property<string>("IdentityId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("identity_id");

                    b.HasKey("FidUsuario");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("IX_tb_usuario_identity_id")
                        .HasFilter("[identity_id] IS NOT NULL");

                    b.ToTable("tb_usuario", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserTutorialStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TutorialSeen")
                        .HasColumnType("bit");

                    b.ToTable((string)null);

                    b.ToView("vw_UserTutorialStatus", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbAuditorium", b =>
                {
                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCobro", b =>
                {
                    b.HasOne("Alquileres.Models.TbCxc", null)
                        .WithMany()
                        .HasForeignKey("FkidCxc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCobroNulo", b =>
                {
                    b.HasOne("Alquileres.Models.TbCobro", null)
                        .WithMany()
                        .HasForeignKey("FkidCobro")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDesglose", b =>
                {
                    b.HasOne("Alquileres.Models.TbCobro", null)
                        .WithMany()
                        .HasForeignKey("FkidCobro")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDetalle", b =>
                {
                    b.HasOne("Alquileres.Models.TbCobro", null)
                        .WithMany()
                        .HasForeignKey("FkidCobro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbComprobanteFiscal", b =>
                {
                    b.HasOne("Alquileres.Models.Empresa", null)
                        .WithMany()
                        .HasForeignKey("FkidEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_tb_comprobante_fiscal_tb_empresa_fid_empresa");

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tb_comprobante_fiscal_tb_usuario_fkid_usuario");
                });

            modelBuilder.Entity("Alquileres.Models.TbCxc", b =>
                {
                    b.HasOne("Alquileres.Models.TbInmueble", null)
                        .WithMany()
                        .HasForeignKey("FkidInmueble");

                    b.HasOne("Alquileres.Models.TbInquilino", null)
                        .WithMany()
                        .HasForeignKey("FkidInquilino");

                    b.HasOne("Alquileres.Models.TbPeriodoPago", null)
                        .WithMany()
                        .HasForeignKey("FkidPeriodoPago")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCxcCuotum", b =>
                {
                    b.HasOne("Alquileres.Models.TbCxc", null)
                        .WithMany()
                        .HasForeignKey("FkidCxc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCxcNulo", b =>
                {
                    b.HasOne("Alquileres.Models.TbCxc", null)
                        .WithMany()
                        .HasForeignKey("FkidCuenta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbGasto", b =>
                {
                    b.HasOne("Alquileres.Models.TbGastoTipo", null)
                        .WithMany()
                        .HasForeignKey("FkidGastoTipo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbGastoTipo", b =>
                {
                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tb_gasto_fkid_usuario");
                });

            modelBuilder.Entity("Alquileres.Models.TbInmueble", b =>
                {
                    b.HasOne("Alquileres.Models.TbMoneda", null)
                        .WithMany()
                        .HasForeignKey("FkidMoneda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbPropietario", null)
                        .WithMany()
                        .HasForeignKey("FkidPropietario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbInquilino", b =>
                {
                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbPermisoCobro", b =>
                {
                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbUsuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("Alquileres.Models.TbUsuario", "IdentityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
