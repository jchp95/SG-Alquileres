// <auto-generated />
using System;
using Alquileres.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Alquileres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Alquileres.Models.TbAuditorium", b =>
                {
                    b.Property<int>("Fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Fid"));

                    b.Property<string>("Faccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faccion");

                    b.Property<DateTime>("Ffecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("ffecha");

                    b.Property<string>("Fhora")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("fhora");

                    b.Property<int>("FkidRegistro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_registro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<string>("Ftabla")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ftabla");

                    b.HasKey("Fid");

                    b.ToTable("tb_auditoria", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobro", b =>
                {
                    b.Property<int>("FidCobro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cobro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCobro"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<decimal>("Fcargos")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fcargos");

                    b.Property<string>("Fconcepto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nchar(255)")
                        .HasColumnName("fconcepto")
                        .IsFixedLength();

                    b.Property<decimal>("Fdescuento")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fdescuento");

                    b.Property<DateOnly>("Ffecha")
                        .HasColumnType("date")
                        .HasColumnName("ffecha");

                    b.Property<DateOnly?>("FfechaAnulacion")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Fhora")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("time")
                        .HasColumnName("fhora");

                    b.Property<int>("FkidCxc")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cxc");

                    b.Property<int>("FkidOrigen")
                        .HasColumnType("int")
                        .HasColumnName("fkid_origen");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fmonto");

                    b.Property<string>("FmotivoAnulacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FidCobro");

                    b.HasIndex("FkidCxc");

                    b.ToTable("tb_cobros", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDesglose", b =>
                {
                    b.Property<int>("FidDesglose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fidDesglose");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidDesglose"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<decimal>("Fcheque")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fcheque");

                    b.Property<decimal>("FdebitoAutomatico")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fdebito_automatico");

                    b.Property<decimal>("Fdeposito")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fdeposito");

                    b.Property<decimal>("Fefectivo")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fefectivo");

                    b.Property<int>("FkidCobro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cobro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("FmontoRecibido")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fmonto_recibido");

                    b.Property<int>("FnoNotaCredito")
                        .HasColumnType("int")
                        .HasColumnName("fno_nota_credito");

                    b.Property<decimal>("FnotaCredito")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fnota_credito");

                    b.Property<decimal>("Ftarjeta")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ftarjeta");

                    b.Property<decimal>("Ftransferencia")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ftransferencia");

                    b.HasKey("FidDesglose");

                    b.HasIndex("FkidCobro");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_cobros_desglose", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDetalle", b =>
                {
                    b.Property<int>("Fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Fid"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<int>("FkidCobro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_cobro");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fmonto");

                    b.Property<decimal>("Fmora")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fmora");

                    b.Property<int>("FnumeroCuota")
                        .HasColumnType("int")
                        .HasColumnName("fnumeroCuota");

                    b.HasKey("Fid");

                    b.HasIndex("FkidCobro");

                    b.ToTable("tb_cobros_detalle", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCxc", b =>
                {
                    b.Property<int>("FidCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cuenta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCuenta"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit");

                    b.Property<int>("FdiasGracia")
                        .HasColumnType("int")
                        .HasColumnName("fdias_gracia");

                    b.Property<DateTime>("FfechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FfechaProxCuota")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FidInquilino")
                        .HasColumnType("int")
                        .HasColumnName("fid_inquilino");

                    b.Property<int>("FidPeriodoPago")
                        .HasColumnType("int")
                        .HasColumnName("fid_periodo_pago");

                    b.Property<int?>("FkidInmueble")
                        .HasColumnType("int")
                        .HasColumnName("fkid_inmueble");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<decimal>("Fmonto")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fmonto");

                    b.Property<string>("Fnota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FtasaMora")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ftasa_mora");

                    b.HasKey("FidCuenta");

                    b.HasIndex(new[] { "FidInquilino" }, "IX_tb_cxc_fid_inquilino");

                    b.HasIndex(new[] { "FidPeriodoPago" }, "IX_tb_cxc_fid_periodo_pago");

                    b.HasIndex(new[] { "FkidInmueble" }, "IX_tb_cxc_fkid_inmueble");

                    b.HasIndex(new[] { "FkidUsuario" }, "IX_tb_cxc_fkid_usuario");

                    b.ToTable("tb_cxc", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCxcCuotum", b =>
                {
                    b.Property<int>("FidCuota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_cuota");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidCuota"));

                    b.Property<int>("FNumeroCuota")
                        .HasColumnType("int")
                        .HasColumnName("fnumero_cuota");

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<DateTime>("FfechaUltCalculo")
                        .HasColumnType("date")
                        .HasColumnName("ffecha_ult_calculo");

                    b.Property<int>("FidCxc")
                        .HasColumnType("int")
                        .HasColumnName("fid_cxc");

                    b.Property<int>("Fmonto")
                        .HasColumnType("int")
                        .HasColumnName("fmonto");

                    b.Property<decimal>("Fmora")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fmora");

                    b.Property<decimal>("Fsaldo")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fsaldo");

                    b.Property<string>("Fstatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasColumnName("fstatus");

                    b.Property<DateTime>("Fvence")
                        .HasColumnType("date")
                        .HasColumnName("fvence");

                    b.HasKey("FidCuota");

                    b.HasIndex("FidCxc");

                    b.ToTable("tb_cxc_cuota", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbInmueble", b =>
                {
                    b.Property<int>("FidInmueble")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_inmueble");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidInmueble"));

                    b.Property<bool>("Factivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("factivo");

                    b.Property<string>("Fdescripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fdescripcion");

                    b.Property<string>("Fdireccion")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("fdireccion");

                    b.Property<DateTime>("FfechaRegistro")
                        .IsUnicode(false)
                        .HasColumnType("datetime2")
                        .HasColumnName("ffechaRegistro");

                    b.Property<int>("FkidPropietario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_propietario");

                    b.Property<decimal>("Fprecio")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fprecio");

                    b.Property<string>("Fubicacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fubicacion");

                    b.HasKey("FidInmueble");

                    b.HasIndex(new[] { "FkidPropietario" }, "IX_tb_inmueble_fkid_propietario");

                    b.ToTable("tb_inmueble", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbInquilino", b =>
                {
                    b.Property<int>("FidInquilino")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_inquilino");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidInquilino"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fapellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fapellidos");

                    b.Property<string>("Fcedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fcedula");

                    b.Property<string>("Fcelular")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("fcelular");

                    b.Property<string>("Fdireccion")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("fdireccion");

                    b.Property<DateTime>("FfechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre");

                    b.Property<string>("Ftelefono")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("ftelefono");

                    b.HasKey("FidInquilino");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_inquilino", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbPeriodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dias")
                        .HasColumnType("int")
                        .HasColumnName("dias");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("periodos_pago", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dias = 6,
                            Nombre = "Semanal"
                        },
                        new
                        {
                            Id = 2,
                            Dias = 15,
                            Nombre = "Quincenal"
                        },
                        new
                        {
                            Id = 3,
                            Dias = 30,
                            Nombre = "Mensual"
                        });
                });

            modelBuilder.Entity("Alquileres.Models.TbPermisoCobro", b =>
                {
                    b.Property<int>("Fid")
                        .HasColumnType("int")
                        .HasColumnName("fid");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.HasKey("Fid")
                        .HasName("PK_tb_permiso_cobro");

                    b.HasIndex("FkidUsuario");

                    b.ToTable("tb_permiso_cobros", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbPropietario", b =>
                {
                    b.Property<int>("FidPropietario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_propietario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidPropietario"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fapellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fapellidos");

                    b.Property<string>("Fcedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fcedula");

                    b.Property<string>("Fcelular")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("fcelular");

                    b.Property<string>("Fdireccion")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("fdireccion");

                    b.Property<DateTime>("FfechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre");

                    b.Property<string>("Ftelefono")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("ftelefono");

                    b.HasKey("FidPropietario");

                    b.ToTable("tb_propietario", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbUsuario", b =>
                {
                    b.Property<int>("FidUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidUsuario"));

                    b.Property<bool>("Factivado")
                        .HasColumnType("bit")
                        .HasColumnName("factivado");

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("FestadoSync")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("A")
                        .HasColumnName("festado_sync")
                        .IsFixedLength();

                    b.Property<int>("FkidSucursal")
                        .HasColumnType("int")
                        .HasColumnName("fkid_sucursal");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int");

                    b.Property<int>("Fnivel")
                        .HasColumnType("int")
                        .HasColumnName("fnivel");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre");

                    b.Property<string>("Fpassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fpassword");

                    b.Property<string>("Fusuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fusuario");

                    b.Property<string>("IdentityId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("identity_id");

                    b.HasKey("FidUsuario");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("IX_tb_usuario_identity_id")
                        .HasFilter("[identity_id] IS NOT NULL");

                    b.ToTable("tb_usuario", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Alquileres.Models.TbCobro", b =>
                {
                    b.HasOne("Alquileres.Models.TbCxc", null)
                        .WithMany()
                        .HasForeignKey("FkidCxc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDesglose", b =>
                {
                    b.HasOne("Alquileres.Models.TbCobro", null)
                        .WithMany()
                        .HasForeignKey("FkidCobro")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCobrosDetalle", b =>
                {
                    b.HasOne("Alquileres.Models.TbCobro", null)
                        .WithMany()
                        .HasForeignKey("FkidCobro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCxc", b =>
                {
                    b.HasOne("Alquileres.Models.TbInquilino", null)
                        .WithMany()
                        .HasForeignKey("FidInquilino");

                    b.HasOne("Alquileres.Models.TbPeriodoPago", null)
                        .WithMany()
                        .HasForeignKey("FidPeriodoPago")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alquileres.Models.TbInmueble", null)
                        .WithMany()
                        .HasForeignKey("FkidInmueble");

                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbCxcCuotum", b =>
                {
                    b.HasOne("Alquileres.Models.TbCxc", null)
                        .WithMany()
                        .HasForeignKey("FidCxc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbInmueble", b =>
                {
                    b.HasOne("Alquileres.Models.TbPropietario", null)
                        .WithMany()
                        .HasForeignKey("FkidPropietario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbInquilino", b =>
                {
                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbPermisoCobro", b =>
                {
                    b.HasOne("Alquileres.Models.TbUsuario", null)
                        .WithMany()
                        .HasForeignKey("FkidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alquileres.Models.TbUsuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("Alquileres.Models.TbUsuario", "IdentityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
