@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Gestión de Cuentas por cobrar";
}

<div class="text-center mb-4">
    <h1>Gestión de Cuentas por cobrar</h1>
</div>

<div class="d-flex justify-content-center mb-4">
    <button id="loadCuentasPorCobrar" class="btn btn-secondary me-2">Cargar cuentas por cobrar</button>
    <a id="createCuentaPorCobrar" class="btn btn-primary shadow-sm">
        <i class="fa fa-plus"></i> Crear Cuenta por Cobrar
    </a>
</div>

<div id="dataTableContainer" style="display: none;">
    <!-- Contenedor dinámico para tabla/formulario -->
</div>

@section Scripts {
    <script>
        // Función de coincidencia personalizada para Select2
        function matchCustom(params, data) {
            if ($.trim(params.term) === '') {
                return data;
            }
            if (typeof data.text === 'undefined') {
                return null;
            }
            if (data.text.toLowerCase().indexOf(params.term.toLowerCase()) > -1) {
                var modifiedData = $.extend({}, data, true);
                modifiedData.text += ' (matched)';
                return modifiedData;
            }
            return null;
        }

        // 1. Solicitud GET para cargar la tabla
        function cargarTablaCuentasPorCobrar() {
            $.ajax({
                url: '@Url.Action("CargarCuentasPorCobrar", "TbCuentasPorCobrar")',
                type: 'GET',
                success: function (data) {
                    $('#dataTableContainer').html(data).fadeIn();

                    // Solo inicializar si no existe o si necesitamos recrearla
                    if (!$.fn.DataTable.isDataTable('#cuentasPorCobrarTable')) {
                        inicializarDataTable();
                    } else {
                        // Si ya existe, recargar los datos
                        var table = $('#cuentasPorCobrarTable').DataTable();
                        table.destroy();
                        inicializarDataTable();
                    }
                },
                error: function () {
                    alert('Error al cargar la tabla de cuentas por cobrar. Inténtalo de nuevo más tarde.');
                }
            });
        }

        // 2. Solicitud GET para cargar la vista parcial de creación de cuentas por cobrar
        function cargarVistaCrearCuentaPorCobrar() {
            $.ajax({
                url: '@Url.Action("Create", "TbCuentasPorCobrar")',
                type: 'GET',
                success: function (data) {
                    $('#dataTableContainer').html(data).fadeIn();
                    inicializarSelect2();
                    aplicarMascaraMonto();
                },
                error: function () {
                    alert('Error al cargar la vista de creación. Inténtalo de nuevo más tarde.');
                }
            });
        }


        // Manejar cambio de estado
        $(document).on('submit', '.cambiarEstadoForm', function (e) {
            e.preventDefault();
            var form = $(this);
            var row = form.closest('tr'); // Obtener la fila actual

            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                success: function (data) {
                    console.log('Estado cambiado.');

                    // Opción 1: Recargar toda la tabla (más simple)
                    cargarTablaCuentasPorCobrar();

                    // Opción 2: Actualizar solo la fila modificada (más eficiente)
                    /*
                    if (data.success) {
                        // Actualizar solo la celda de estado
                        row.find('.estado-cell').text(data.newEstado ? 'Activo' : 'Inactivo');
 
                        // Actualizar el botón
                        var newEstado = !data.currentEstado;
                        var btn = form.find('button');
                        btn.removeClass(newEstado ? 'btn-danger' : 'btn-success')
                           .addClass(newEstado ? 'btn-success' : 'btn-danger')
                           .text(newEstado ? 'Desactivar' : 'Activar');
 
                        // Actualizar el valor del estado en el formulario
                        form.find('[name="estado"]').val(newEstado.toString());
                    }
                    */
                },
                error: function (xhr, status, error) {
                    console.error("Error al cambiar estado: " + error);
                }
            });
        });

        // Reemplaza la función aplicarMascaraPrecio con esta versión mejorada
        function aplicarMascaraMonto() {
            $('#monto-input').inputmask('remove');

            const maskOptions = {
                alias: "numeric",
                groupSeparator: ",",
                autoGroup: true,
                digits: 2,
                radixPoint: ".",
                placeholder: "0.00",
                numericInput: true,
                autoUnmask: true,
                removeMaskOnSubmit: true,
                clearIncomplete: true,
                rightAlign: false,  // <- Esta es la opción clave
            };

            $('.numeric-input').inputmask(maskOptions);
        }


        $(document).on('submit', 'form[action$="/Create"]', function (e) {
            e.preventDefault();
            var form = $(this);
            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                success: function (data) {
                    console.log('Cuenta por cobrar creada.');
                    cargarTablaCuentasPorCobrar();
                },
                error: function (xhr) {
                    let msg = "Error desconocido.";
                    try {
                        const response = JSON.parse(xhr.responseText);
                        msg = response.message || response.errors?.join("<br>") || msg;
                    } catch (e) {
                        msg = xhr.responseText || msg;
                    }
                    alert("Error al crear cuenta por cobrar:\n" + msg);
                }
            });
        });


        function inicializarDataTable() {
            if ($.fn.DataTable.isDataTable('#tablaInquilinos')) {
                $('#cuentasPorCobrarTable').DataTable().destroy();
            }

            // Configuración de localización
            moment.locale('es', {
                months: 'Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre'.split('_'),
                monthsShort: 'Ene_Feb_Mar_Abr_May_Jun_Jul_Ago_Sep_Oct_Nov_Dic'.split('_'),
                weekdays: 'Domingo_Lunes_Martes_Miércoles_Jueves_Viernes_Sábado'.split('_'),
                weekdaysShort: 'Dom_Lun_Mar_Mié_Jue_Vie_Sáb'.split('_')
            });

            // Inicializar datepickers
            var fechaInicioMin = new DateTime($('#min'), {
                format: 'DD/MM/YYYY',
                i18n: {
                    previous: 'Anterior',
                    next: 'Siguiente',
                    months: moment.localeData('es').months(),
                    weekdays: moment.localeData('es').weekdaysShort()
                }
            });

            var fechaInicioMax = new DateTime($('#max'), {
                format: 'DD/MM/YYYY',
                i18n: {
                    previous: 'Anterior',
                    next: 'Siguiente',
                    months: moment.localeData('es').months(),
                    weekdays: moment.localeData('es').weekdaysShort()
                }
            });

            // Configuración de DataTable
            var table = $('#cuentasPorCobrarTable').DataTable({
                pageLength: 10,
                lengthMenu: [5, 10, 25, 50, 100],
                order: [[0, 'asc']], // Ordenar por Inquilino por defecto
                responsive: true,
                dom: '<"top"lf>rt<"bottom"ip><"clear">',
                columnDefs: [
                    {
                        targets: [2, 3], // Columnas Días de Gracia y Tasa de Mora
                        className: 'text-center'
                    },
                    {
                        targets: [4, 5, 6], // Columnas de Fechas y Período
                        className: 'text-center'
                    }
                ],
                initComplete: function () {
                    $('.dt-datetime').css('z-index', '1060');
                }
            });

            // Eventos
            $('#min, #max').on('change', function () {
                $(this).val() ? $(this).addClass('has-value') : $(this).removeClass('has-value');
            });

            $('#btnAplicarFiltros').click(aplicarFiltros);
            $('#btnResetFiltros').click(resetFiltros);
            $('#min-clear, #max-clear').click(limpiarFecha);

            // Funciones
            function aplicarFiltros() {
                var min = $('#min').val();
                var max = $('#max').val();

                if (min || max) {
                    $.fn.dataTable.ext.search.push(function (settings, data) {
                        var fechaTabla = moment(data[4], 'DD/MM/YYYY');
                        var minDate = min ? moment(min, 'DD/MM/YYYY') : null;
                        var maxDate = max ? moment(max, 'DD/MM/YYYY') : null;

                        return (!minDate || fechaTabla.isSameOrAfter(minDate)) &&
                            (!maxDate || fechaTabla.isSameOrBefore(maxDate));
                    });
                }

                table.draw();
                $.fn.dataTable.ext.search.pop();
            }

            function resetFiltros() {
                $('#min, #max').val('').removeClass('has-value');
                table.search('').columns().search('').draw();
            }

            function limpiarFecha() {
                $(this).closest('.input-group').find('input').val('').removeClass('has-value').change();
            }

            applyCustomFilters(table);
            aplicarMascaraMonto();
            return table;
        }

        function applyCustomFilters(table) {
            console.log('Inicializando filtros personalizados...');

            // Filtro por estado - Versión definitiva
            $('#filtroEstado').on('change', function () {
                const value = $(this).val();
                // console.log('Filtro estado cambiado a:', value);

                // Limpiamos cualquier filtro previo
                table.search('').columns().search('').draw();

                if (value !== '') {
                    // console.log('Aplicando filtro para estado:', value);

                    // Usamos una función de filtrado personalizada
                    $.fn.dataTable.ext.search.push(
                        function (settings, data, dataIndex) {
                            const row = table.row(dataIndex).node();
                            const estadoText = $(row).find('td:eq(7)').text().trim();
                            // console.log('Texto estado encontrado:', estadoText);

                            if (value === 'true') {
                                return estadoText === 'Activo';
                            } else {
                                return estadoText === 'Inactivo';
                            }
                        }
                    );

                    table.draw();
                    // Limpiamos el filtro después de aplicarlo
                    $.fn.dataTable.ext.search.pop();
                } else {
                    // console.log('Mostrando todos los registros (sin filtro)');
                    table.draw();
                }
            });

            $('#filtroInquilino').on('keyup', function () {
                table.column(0).search(this.value).draw();
            });

            $('#filtroPeriodo').on('change', function () {
                table.column(5).search(this.value).draw();
            });

            $('#btnResetFiltros').on('click', function () {
                $('#filtroInquilino').val('');
                $('#filtroEstado').val('').trigger('change');
                $('#filtroPeriodo').val('');
            });
        }

        let inquilinosData = [];
        let inmueblesData = [];

        function inicializarSelect2() {
            // Configurar eventos para capturar IDs
            $('#busquedaInquilino').on('change', function () {
                $('#FidInquilino').val($(this).val());
            });

            $('#busquedaInmueble').on('change', function () {
                $('#FkidInmueble').val($(this).val());
            });

            // Inicializar select2 para inquilinos
            const selectInquilino = $('#busquedaInquilino').select2({
                placeholder: "Buscar inquilino...",
                allowClear: true,
                matcher: matchCustom
            });

            // Inicializar select2 para inmuebles
            const selectInmueble = $('#busquedaInmueble').select2({
                placeholder: "Buscar inmueble...",
                allowClear: true,
                matcher: matchCustom
            });

            // Cargar inquilinos
            $.ajax({
                url: '/TbCuentasPorCobrar/BuscarInquilinosOInmuebles',
                dataType: 'json',
                success: function (data) {
                    inquilinosData = data.results.filter(item => item.tipo === "inquilino");
                    selectInquilino.empty()
                        .append(new Option('', ''))
                        .append(inquilinosData.map(item => new Option(item.text, item.id)))
                        .trigger('change');
                },
                error: function () {
                    alert('Error al cargar los inquilinos.');
                }
            });

            // Cargar inmuebles
            $.ajax({
                url: '/TbCuentasPorCobrar/BuscarInquilinosOInmuebles',
                dataType: 'json',
                success: function (data) {
                    inmueblesData = data.results.filter(item => item.tipo === "inmueble");
                    selectInmueble.empty()
                        .append(new Option('', ''))
                        .append(inmueblesData.map(item => new Option(item.text, item.id)))
                        .trigger('change');
                },
                error: function () {
                    alert('Error al cargar los inmuebles.');
                }
            });
        }

        $(document).ready(function () {
            // Eventos
            $('#loadCuentasPorCobrar').click(cargarTablaCuentasPorCobrar);
            $('#createCuentaPorCobrar').click(cargarVistaCrearCuentaPorCobrar);

            aplicarMascaraMonto();
            inicializarDataTable();
        });
    </script>
}
