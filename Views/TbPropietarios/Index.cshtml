@{
    ViewData["Title"] = "Gestión de Propietarios";
}

<div class="text-center mb-4">
    <h1>Gestión de Propietarios</h1>
</div>

<div class="d-flex justify-content-center mb-4">
    <button id="loadPropietarios" class="btn btn-secondary me-2">Cargar Propietarios</button>
    <a id="createPropietario" class="btn btn-primary shadow-sm">
        <i class="fa fa-plus"></i> Crear Nuevo
    </a>
</div>

<!-- Contenedor para toasts -->
<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3"></div>

<!-- Spinner de carga -->
<div id="loadingSpinner" class="spinner-border text-primary position-fixed top-50 start-50" style="display: none;">
</div>

<div id="dataTableContainer" style="display: none;">
    <!-- Aquí se cargará la vista parcial de la tabla o el formulario -->
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Configuración global de manejo de errores AJAX
            $(document).ajaxError(function (event, jqxhr, settings, thrownError) {
                showError('Ocurrió un error inesperado. Por favor intente nuevamente.');
            });

            // Función para mostrar toasts
            function showToast(message, type = 'error', duration = 3000) {
                const backgroundColor = type === 'error' ? 'red' : 'orange'; // Color de fondo según el tipo
                const toast = $(`<div class="toast" style="background-color: ${backgroundColor}; color: white;" role="alert" aria-live="assertive" aria-atomic="true">
                                                                                                                <div class="toast-body">${message}</div>
                                                                                                            </div>`);
                $('#toastContainer').append(toast);
                new bootstrap.Toast(toast[0], { delay: duration }).show();
            }

            // Función para mostrar errores
            function showError(message, duration = 3000) {
                const toast = $(`<div class="toast" style="background-color: red; color: white;" role="alert" aria-live="assertive" aria-atomic="true">
                                                                                                                <div class="toast-body">${message}</div>
                                                                                                            </div>`);
                $('#toastContainer').append(toast);
                new bootstrap.Toast(toast[0], { delay: duration }).show();
            }

            // Función para manejar errores de validación del servidor
            function handleValidationErrors(form, errors) {
                form.find('.is-invalid').removeClass('is-invalid');
                form.find('.invalid-feedback').remove();

                for (const [key, value] of Object.entries(errors)) {
                    const field = form.find(`[name="${key}"]`);
                    field.addClass('is-invalid');

                    if (value && value.length > 0) {
                        field.after(`<div class="invalid-feedback">${value}</div>`);
                    }
                }
            }

            // Función genérica para llamadas AJAX
            async function ajaxRequest(config) {
                const defaults = {
                    showLoading: true,
                    retries: 3,
                    retryDelay: 1000
                };

                const options = { ...defaults, ...config };
                let attempts = 0;

                while (attempts < options.retries) {
                    try {
                        if (options.showLoading) {
                            $('#loadingSpinner').show();
                        }

                        const response = await $.ajax({
                            ...options,
                            error: null // Deshabilitamos el manejo automático de errores
                        });

                        return response;
                    } catch (error) {
                        attempts++;

                        // Si es el último intento o error no es recuperable
                        if (attempts === options.retries ||
                            (error.status && [400, 401, 403, 404].includes(error.status))) {
                            // Manejo específico de códigos de estado
                            switch (error.status) {
                                case 401:
                                    window.location.href = '/Account/Login';
                                    return;
                                case 403:
                                    showError('No tiene permisos para realizar esta acción');
                                    return;
                                case 404:
                                    showError('Recurso no encontrado');
                                    return;
                                default:
                                    showError(options.errorMessage || error.responseText || 'Error de comunicación con el servidor');
                                    throw error;
                            }
                        }

                        // Esperar antes de reintentar
                        await new Promise(resolve => setTimeout(resolve, options.retryDelay));
                    } finally {
                        $('#loadingSpinner').hide();
                    }
                }
            }

            // Función para cargar la tabla de propietarios
            async function cargarTablaPropietarios() {
                try {
                    const data = await ajaxRequest({
                        url: '@Url.Action("CargarPropietarios", "TbPropietarios")',
                        type: 'GET',
                        errorMessage: 'Error al cargar la lista de propietarios'
                    });

                    $('#dataTableContainer').html(data).fadeIn();

                    $('#telefono-input').inputmask({
                            mask: '(999) 999-9999',
                            placeholder: '',             // Sin placeholders visibles
                            showMaskOnHover: false,      // No mostrar al pasar el mouse
                            clearIncomplete: true,       // Limpiar si el valor está incompleto
                            autoUnmask: true,            // Enviar solo dígitos al servidor (8092211234)
                            showMaskOnFocus: false,      // Oculta la máscara al enfocar
                            onBeforeMask: function(value, opts) {
                                return value.replace(/[^0-9]/g, ''); // Asegura solo dígitos
                            }
                        });

                        // Máscara para celular (mismo formato en RD)
                        $('#celular-input').inputmask({
                            mask: '(999) 999-9999',
                            placeholder: '',
                            showMaskOnHover: false,
                            clearIncomplete: true,
                            autoUnmask: true,
                            showMaskOnFocus: false,
                            onBeforeMask: function(value, opts) {
                                return value.replace(/[^0-9]/g, '');
                            }
                        });

                    // Manejo de DataTables
                    if ($.fn.DataTable.isDataTable('#propietariosTable')) {
                        $('#propietariosTable').DataTable().destroy();
                    }
                    $('#propietariosTable').DataTable({
                        responsive: true,
                        pageLength: 10,
                        lengthMenu: [5, 10, 25, 50],
                        order: [[0, 'asc']],
                        autoWidth: false
                    });
                } catch (error) {
                    console.error('Error general:', error);
                }
            }

            $(document).on('click', '.editPropietario', function () {
                var id = $(this).data('id');
                $.ajax({
                    url: '@Url.Action("Edit", "TbPropietarios")/' + id,
                    type: 'GET',
                    success: function (data) {
                        $('#dataTableContainer').html(data);
                        $('#dataTableContainer').show();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error al cargar el formulario de edición: " + error);
                    }
                });
            });

            // Manejador de eventos para el botón "Cargar Propietarios"
            $('#loadPropietarios').on('click', function () {
                cargarTablaPropietarios();
            });

            // Manejador de eventos para el botón "Crear Nuevo"
            $('#createPropietario').on('click', async function () {
                try {
                    const data = await ajaxRequest({
                        url: '@Url.Action("Create", "TbPropietarios")',
                        type: 'GET',
                        errorMessage: 'Error al cargar el formulario de creación'
                    });

                    $('#dataTableContainer').html(data).fadeIn();

                    $('#telefono-input').inputmask({
                            mask: '(999) 999-9999',
                            placeholder: '',             // Sin placeholders visibles
                            showMaskOnHover: false,      // No mostrar al pasar el mouse
                            clearIncomplete: true,       // Limpiar si el valor está incompleto
                            autoUnmask: true,            // Enviar solo dígitos al servidor (8092211234)
                            showMaskOnFocus: false,      // Oculta la máscara al enfocar
                            onBeforeMask: function(value, opts) {
                                return value.replace(/[^0-9]/g, ''); // Asegura solo dígitos
                            }
                        });

                        // Máscara para celular (mismo formato en RD)
                        $('#celular-input').inputmask({
                            mask: '(999) 999-9999',
                            placeholder: '',
                            showMaskOnHover: false,
                            clearIncomplete: true,
                            autoUnmask: true,
                            showMaskOnFocus: false,
                            onBeforeMask: function(value, opts) {
                                return value.replace(/[^0-9]/g, '');
                            }
                        });

                    initFormValidation($('#dataTableContainer').find('form'));
                } catch (error) {
                    console.error('Error al cargar el formulario de creación:', error);
                }
            });

            // Manejar envío de formulario de edición
            $(document).on('submit', 'form[action*="/Edit"]', async function (e) {
                e.preventDefault();
                const form = $(this);
                try {
                    const data = await ajaxRequest({
                        url: form.attr('action'),
                        type: 'POST',
                        data: form.serialize(),
                        errorMessage: 'Error al editar los datos del propietario'
                    });

                    // Verificar si la respuesta es la vista parcial de la tabla
                    if (data.includes('_PropietariosPartial')) {
                        await cargarTablaPropietarios();
                        showToast('Propietario editado correctamente.', 'success');
                    }
                    // Verificar si es la vista de edición (por si hay errores de validación)
                    else if (data.includes('_EditPropietarioPartial')) {
                        $('#dataTableContainer').html(data);
                        // Re-inicializar validación si es necesario
                        initFormValidation($('#dataTableContainer').find('form'));
                    }
                    // Cualquier otro caso (éxito sin retornar la vista parcial)
                    else {
                        await cargarTablaPropietarios();
                        showToast('Propietario editado correctamente.', 'success');
                    }
                } catch (error) {
                    // Manejo de errores ya implementado
                    showError('Error al actualizar el propietario: ' + (error.responseText || error.message));
                }
            });

            // Manejador de eventos para el botón "Anular"
            $(document).on('submit', '.cambiarEstadoForm', async function (e) {
                e.preventDefault();
                const form = $(this);
                try {
                    const data = await ajaxRequest({
                        url: form.attr('action'),
                        type: 'POST',
                        data: form.serialize(),
                        errorMessage: 'Error al cambiar el estado del propietario'
                    });

                    // Siempre recargar la tabla después de cambiar el estado
                    await cargarTablaPropietarios();

                    // Mostrar mensaje de éxito
                    showToast('Estado del propietario actualizado correctamente.', 'success');

                } catch (error) {
                    // Manejo de errores ya implementado
                }
            });

            // Manejador de envío de formulario de creación
            $(document).on('submit', 'form[action$="/Create"]', async function (e) {
                e.preventDefault();
                const form = $(this);
                try {
                    const data = await ajaxRequest({
                        url: form.attr('action'),
                        type: 'POST',
                        data: form.serialize(),
                        form: form,
                        errorMessage: 'Error al crear el propietario'
                    });
                    // Aquí verificamos si la respuesta es la esperada
                    if (data.includes('_PropietariosPartial')) {
                        cargarTablaPropietarios();
                        showToast('Propietario creado correctamente.', 'success'); // Mostrar toast de éxito
                    } else {
                        $('#dataTableContainer').html(data);
                        initFormValidation(form);
                        showToast('Propietario creado correctamente.', 'success'); // Mostrar toast de éxito también aquí
                    }
                } catch (error) {
                    // Manejo de errores ya implementado
                }
            });

            /*$(document).on('submit', 'form[action*="/Edit"]', function (e) {
                e.preventDefault();
                var form = $(this);
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function (data) {
                        cargarTablaPropietarios(); // Recarga la lista
                        showToast('Propietario editado correctamente.', 'success');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error al editar propietario: " + error);
                    }
                });
            });*/

            // Función para inicializar validación del lado cliente
            function initFormValidation(form) {
                form.validate({
                    rules: {
                        Fcedula: {
                            required: true,
                            digits: true
                        },
                        Ftelefono: {
                            digits: true
                        },
                        Fcelular: {
                            digits: true
                        }
                    },
                    messages: {
                        Fcedula: {
                            required: "La cédula es obligatoria",
                        }
                    },
                    errorClass: "is-invalid",
                    validClass: "is-valid",
                    errorPlacement: function (error, element) {
                        error.addClass('invalid-feedback');
                        element.after(error);
                    }
                });
            }
        });
    </script>
}